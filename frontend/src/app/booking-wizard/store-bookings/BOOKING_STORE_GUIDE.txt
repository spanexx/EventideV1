================================================================================
BOOKING STORE - COMPLETE GUIDE
================================================================================

‚úÖ UPDATED TO USE REAL BACKEND APIs
‚úÖ MODELS MATCH BACKEND DTOs EXACTLY
‚úÖ FULL CRUD OPERATIONS IMPLEMENTED

================================================================================
STORE STRUCTURE
================================================================================

üìÅ /booking/store/
‚îú‚îÄ‚îÄ actions/booking.actions.ts    - All booking actions
‚îú‚îÄ‚îÄ effects/booking.effects.ts    - Side effects (API calls)
‚îú‚îÄ‚îÄ reducers/booking.reducer.ts   - State management
‚îî‚îÄ‚îÄ selectors/booking.selectors.ts - State selectors

================================================================================
BACKEND API REQUIREMENTS
================================================================================

CreateBookingDto (Backend expects):
  ‚úì providerId: string
  ‚úì availabilityId: string
  ‚úì guestName: string
  ‚úì guestEmail: string
  ‚úì guestPhone?: string (optional, international format +1234567890)
  ‚úì startTime: Date
  ‚úì endTime: Date
  ‚úì notes?: string (optional, max 500 chars)
  ‚úì guestId?: string (optional)
  ‚úì serialKey?: string (optional, internal use)
  ‚úì idempotencyKey?: string (optional, UUID v4)
  ‚úì recurring?: RecurringBookingOptions (optional)

RecurringBookingOptions:
  ‚úì endDate?: Date
  ‚úì frequency?: 'weekly' | 'daily'
  ‚úì occurrences?: number

================================================================================
AVAILABLE ACTIONS
================================================================================

BOOKING FLOW:
1. setDuration({ duration })
2. setSelectedSlot({ slot })
3. setGuestInfo({ guestInfo })
4. createBooking({ booking })
   ‚Üí createBookingSuccess({ booking })
   ‚Üí createBookingFailure({ error })

BOOKING OPERATIONS:
- getBookingById({ id })
- updateBooking({ id, updates })
- cancelBooking({ id, guestEmail })
- verifyBooking({ serialKey })
- getQRCode({ serialKey })

AVAILABILITY:
- loadAvailableSlots({ request })
  ‚Üí loadAvailableSlotsSuccess({ slots })
  ‚Üí loadAvailableSlotsFailure({ error })

WEBSOCKET EVENTS:
- slotBooked({ slotId })
- bookingConfirmed({ booking })

================================================================================
STATE SHAPE
================================================================================

BookingState {
  duration: number | null;
  selectedSlot: TimeSlot | null;
  guestInfo: GuestInfo | null;
  booking: Booking | null;
  availability: TimeSlot[];
  qrCode: string | null;
  loading: boolean;
  error: string | null;
}

================================================================================
USAGE EXAMPLES
================================================================================

DISPATCH ACTIONS:
-----------------
import { Store } from '@ngrx/store';
import * as BookingActions from './store/actions/booking.actions';

constructor(private store: Store) {}

// Create booking
this.store.dispatch(BookingActions.createBooking({
  booking: {
    providerId: 'provider-123',
    availabilityId: 'slot-456',
    guestName: 'John Doe',
    guestEmail: 'john@example.com',
    guestPhone: '+1234567890',
    startTime: new Date('2025-10-15T09:00:00'),
    endTime: new Date('2025-10-15T10:00:00'),
    notes: 'Special requirements'
  }
}));

// Get booking by ID
this.store.dispatch(BookingActions.getBookingById({ id: 'booking-123' }));

// Cancel booking
this.store.dispatch(BookingActions.cancelBooking({
  id: 'booking-123',
  guestEmail: 'john@example.com'
}));

// Verify booking
this.store.dispatch(BookingActions.verifyBooking({
  serialKey: 'SERIAL123'
}));

// Get QR code
this.store.dispatch(BookingActions.getQRCode({
  serialKey: 'SERIAL123'
}));

// Load available slots
this.store.dispatch(BookingActions.loadAvailableSlots({
  request: {
    providerId: 'provider-123',
    date: new Date('2025-10-15'),
    duration: 60
  }
}));


SELECT STATE:
-------------
import { selectBooking, selectLoading, selectError } from './store/selectors';

// Select booking
this.booking$ = this.store.select(selectBooking);

// Select loading state
this.loading$ = this.store.select(selectLoading);

// Select error
this.error$ = this.store.select(selectError);

// In template
<div *ngIf="loading$ | async">Loading...</div>
<div *ngIf="error$ | async as error">{{ error }}</div>
<div *ngIf="booking$ | async as booking">
  Booking: {{ booking.guestName }}
</div>

================================================================================
EFFECTS BEHAVIOR
================================================================================

All effects:
‚úì Call real backend APIs (no more mocks)
‚úì Handle errors gracefully
‚úì Extract error messages from API responses
‚úì Dispatch success/failure actions
‚úì Use BookingService which uses BookingFacadeService

Error Handling:
- Extracts: error.error?.message || error.message || 'Default message'
- Always dispatches failure action with error message
- Updates state.error in reducer

================================================================================
BACKEND INTEGRATION
================================================================================

Service Chain:
BookingEffects 
  ‚Üí BookingService (booking module)
    ‚Üí BookingFacadeService (dashboard)
      ‚Üí BookingOperationsService
        ‚Üí BookingApiService
          ‚Üí HTTP Request to Backend

All requests go through the modular booking services!

================================================================================
VALIDATION
================================================================================

Backend Validation:
‚úì guestName: 1-100 characters
‚úì guestEmail: Valid email format
‚úì guestPhone: International format (+1234567890)
‚úì notes: Max 500 characters
‚úì idempotencyKey: UUID v4 format
‚úì startTime/endTime: Valid dates

Frontend Should Validate:
- Email format before dispatch
- Phone format (+[country][number])
- Required fields present
- Date validity

================================================================================
WEBSOCKET INTEGRATION
================================================================================

BookingSocketService:
‚úì bookingConfirmed$ - Emits when booking confirmed
‚úì slotBooked$ - Emits when slot is booked

Effects automatically subscribe and dispatch actions:
- bookingConfirmed ‚Üí Updates state.booking
- slotBooked ‚Üí Marks slot as booked in availability array

================================================================================
TESTING
================================================================================

Test Actions:
import * as BookingActions from './actions/booking.actions';

it('should create booking action', () => {
  const booking = { /* booking data */ };
  const action = BookingActions.createBooking({ booking });
  expect(action.type).toBe('[Booking] Create Booking');
});

Test Effects:
- Mock BookingService
- Test success and failure paths
- Verify correct actions dispatched

Test Reducer:
- Test initial state
- Test each action updates state correctly
- Test loading/error states

================================================================================
MIGRATION FROM OLD STORE
================================================================================

OLD (Mock Data):
- Used fake BookingService with of() observables
- Returned mock data
- No real API calls

NEW (Real APIs):
‚úì Uses real BookingFacadeService
‚úì Makes actual HTTP requests
‚úì Handles real errors
‚úì Models match backend exactly

================================================================================
COMMON PATTERNS
================================================================================

CREATE BOOKING FLOW:
1. User selects slot ‚Üí setSelectedSlot
2. User enters info ‚Üí setGuestInfo
3. User confirms ‚Üí createBooking
4. Success ‚Üí booking created, navigate to confirmation
5. Failure ‚Üí show error message

VERIFY BOOKING:
1. User scans QR or enters serial key
2. Dispatch verifyBooking({ serialKey })
3. Success ‚Üí show booking details
4. Failure ‚Üí show "Invalid booking" message

CANCEL BOOKING:
1. User clicks cancel
2. Prompt for email confirmation
3. Dispatch cancelBooking({ id, guestEmail })
4. Success ‚Üí booking cancelled
5. Failure ‚Üí show error (invalid email, etc.)

================================================================================
