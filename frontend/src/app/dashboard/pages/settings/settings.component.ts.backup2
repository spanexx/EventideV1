import { Component, OnInit, signal, computed, effect, inject, DestroyRef } from '@angular/core';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatButtonModule } from '@angular/material/button';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSelectModule } from '@angular/material/select';
import { MatRadioModule } from '@angular/material/radio';
import { MatTabsModule } from '@angular/material/tabs';
import { MatChipsModule } from '@angular/material/chips';
import { MatIconModule } from '@angular/material/icon';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { CommonModule } from '@angular/common';
import { SettingsService, UserPreferences } from './settings.service';
import { AuthService, User as AuthUser } from '../../../services/auth.service';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Store } from '@ngrx/store';
import { Actions, ofType } from '@ngrx/effects';
import {
  selectUser,
  selectUserEmail,
  selectUserFullName,
} from '../../../auth/store/auth/selectors/auth.selectors';
import { Observable, Subject, takeUntil } from 'rxjs';
import {
  selectTheme,
  selectLanguage,
  selectTimezone,
  loadAppearancePreferences,
  updateTheme,
  updateLanguage,
  updateTimezone,
  updateAppearancePreferences,
} from '../../../store/appearance';
import * as AuthActions from '../../../auth/store/auth/actions/auth.actions';
import { MatChipInputEvent } from '@angular/material/chips';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { SettingsProfileService } from './services/settings-profile.service';
import { SettingsBusinessService } from './services/settings-business.service';
import { SettingsChipsService } from './services/settings-chips.service';
import { SettingsPreferencesHandlerService } from './services/settings-preferences-handler.service';

@Component({
  selector: 'app-settings',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatSlideToggleModule,
    MatButtonModule,
    MatSnackBarModule,
    MatSelectModule,
    MatRadioModule,
    MatTabsModule,
    MatChipsModule,
    MatIconModule,
    MatAutocompleteModule,
  ],
  templateUrl: './settings.component.html',
  styleUrl: './settings.component.scss',
})
export class SettingsComponent implements OnInit {
  user$!: Observable<any>;
  userEmail$!: Observable<string>;
  userFullName$!: Observable<string>;

  // Industry categories from backend
  industryCategories = [
    'Business Consulting',
    'Management Consulting',
    'Strategy Consulting',
    'Software Development',
    'Web Development',
    'Mobile Development',
    'IT Consulting',
    'Cybersecurity',
    'Data Analytics',
    'Cloud Services',
    'Digital Marketing',
    'Graphic Design',
    'Branding',
    'Content Creation',
    'Social Media',
    'SEO/SEM',
    'Financial Services',
    'Accounting',
    'Legal Services',
    'Tax Consulting',
    'Health & Wellness',
    'Life Coaching',
    'Career Coaching',
    'Fitness',
    'Photography',
    'Videography',
    'Writing',
    'Translation',
    'Real Estate',
    'Property Management',
    'Event Planning',
    'Hospitality',
    'Catering',
    'Logistics',
    'Supply Chain',
    'Transportation',
    'HR Consulting',
    'Recruitment',
    'Training & Development',
    'Sales Training',
    'Business Development',
    'Other',
  ];

  commonServices = [
    'Project Consultation',
    'Strategic Planning',
    'Market Research',
    'Financial Analysis',
    'Software Development',
    'Web Design',
    'Mobile App Development',
    'Content Creation',
    'Social Media Management',
    'Brand Development',
    'SEO Optimization',
    'PPC Management',
    'Legal Consultation',
    'Tax Preparation',
    'Accounting Services',
    'Coaching Session',
    'Training Workshop',
    'Personal Training',
    'Photography Session',
    'Video Production',
    'Writing & Editing',
    'Real Estate Consulting',
    'Property Management',
    'Event Planning',
    'Logistics Coordination',
    'Supply Chain Analysis',
    'HR Consulting',
    'Recruitment Services',
    'Sales Training',
    'Business Development',
  ];

  commonDurations = [15, 30, 45, 60, 90, 120];

  // Computed arrays for chip display
  servicesArray = computed(() => this.businessHandler.services());
  categoriesArray = computed(() => this.businessHandler.categories());
  durationsArray = computed(() => this.businessHandler.availableDurations().map((d) => d.toString()));

  constructor(
    private settingsService: SettingsService,
    private snackBar: MatSnackBar,
    private store: Store,
    private authService: AuthService,
    private destroyRef: DestroyRef,
    private actions$: Actions,
    public profileHandler: SettingsProfileService,
    public businessHandler: SettingsBusinessService,
    public chipsHandler: SettingsChipsService,
    public prefsHandler: SettingsPreferencesHandlerService,
  ) {
    // Effect to sync service updates with local signal
    effect(() => {
      this.settingsService.preferences$
        .pipe(takeUntilDestroyed(this.destroyRef))
        .subscribe((prefs) => {
          this.prefsHandler.setPreferences(prefs);
        });
    });

    // Effect to sync appearance preferences from NgRx store
    effect(() => {
      this.store
        .select(selectTheme)
        .pipe(takeUntilDestroyed(this.destroyRef))
        .subscribe((theme) => {
          this.prefsHandler.updatePreference('theme', theme);
        });
    });

    effect(() => {
      this.store
        .select(selectLanguage)
        .pipe(takeUntilDestroyed(this.destroyRef))
        .subscribe((language) => {
          this.prefsHandler.updatePreference('language', language);
        });
    });

    effect(() => {
      this.store
        .select(selectTimezone)
        .pipe(takeUntilDestroyed(this.destroyRef))
        .subscribe((timezone) => {
          this.prefsHandler.updatePreference('timezone', timezone);
        });
    });

    // Subscribe to NgRx store user to populate editable fields
    this.store.select(selectUser).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((user) => {
      this.profileHandler.updateFromUser(user);
      this.businessHandler.updateFromUser(user);
    });

    // Listen for update success/failure
    this.actions$.pipe(
      takeUntilDestroyed(this.destroyRef),
      ofType(AuthActions.updateUserSuccess)
    ).subscribe(() => {
      this.snackBar.open('Settings updated successfully', 'Close', { duration: 2000 });
    });

    this.actions$.pipe(
      takeUntilDestroyed(this.destroyRef),
      ofType(AuthActions.updateUserFailure)
    ).subscribe(({ error }: { error: string }) => {
      this.snackBar.open(`Failed to update: ${error}`, 'Close', { duration: 3000 });
    });
  }

  ngOnInit(): void {
    this.store.dispatch(loadAppearancePreferences());
    this.store.dispatch(AuthActions.refreshUser());
    this.prefsHandler.loadPreferences();

    this.user$ = this.store.select(selectUser);
    this.userEmail$ = this.store.select(selectUserEmail);
    this.userFullName$ = this.store.select(selectUserFullName);
  }

  // Delegate to services
  saveProfile(): void {
    this.profileHandler.saveProfile();
  }

  saveBusinessSettings(): void {
    this.businessHandler.saveBusinessSettings();
  }

  saveNotificationSettings(): void {
    this.prefsHandler.saveNotificationSettings();
  }

  saveAppearanceSettings(): void {
    this.prefsHandler.saveAppearanceSettings();
  }

  saveCalendarSettings(): void {
    this.prefsHandler.saveCalendarSettings();
  }

  savePrivacySettings(): void {
    this.prefsHandler.savePrivacySettings();
  }

  saveBookingSettings(): void {
    this.prefsHandler.saveBookingSettings();
  }

  saveLocalizationSettings(): void {
    this.prefsHandler.saveLocalizationSettings();
  }

  // Chip operations
  addService(event: MatChipInputEvent): void {
    this.businessHandler.services.set(
      this.chipsHandler.addService(this.businessHandler.services(), event)
    );
  }

  removeService(service: string): void {
    this.businessHandler.services.set(
      this.chipsHandler.removeService(this.businessHandler.services(), service)
    );
  }

  addCategory(event: MatChipInputEvent): void {
    this.businessHandler.categories.set(
      this.chipsHandler.addCategory(this.businessHandler.categories(), event)
    );
  }

  removeCategory(category: string): void {
    this.businessHandler.categories.set(
      this.chipsHandler.removeCategory(this.businessHandler.categories(), category)
    );
  }

  addDuration(event: MatChipInputEvent): void {
    this.businessHandler.availableDurations.set(
      this.chipsHandler.addDuration(this.businessHandler.availableDurations(), event)
    );
  }

  removeDuration(duration: string): void {
    this.businessHandler.availableDurations.set(
      this.chipsHandler.removeDuration(this.businessHandler.availableDurations(), duration)
    );
  }

  onCategorySelected(event: any): void {
    const value = event.option.value.trim();
    this.businessHandler.categories.set(
      this.chipsHandler.onCategorySelected(this.businessHandler.categories(), value)
    );
  }

  onServiceSelected(event: any): void {
    const value = event.option.value.trim();
    this.businessHandler.services.set(
      this.chipsHandler.onServiceSelected(this.businessHandler.services(), value)
    );
  }

  onDurationSelected(event: any): void {
    const duration = parseInt(event.option.value);
    this.businessHandler.availableDurations.set(
      this.chipsHandler.onDurationSelected(this.businessHandler.availableDurations(), duration)
    );
  }

  loadPreferences(): void {
    this.prefsHandler.loadPreferences();
  }

  updatePreference<K extends keyof UserPreferences>(key: K, value: UserPreferences[K]): void {
    this.prefsHandler.updatePreference(key, value);
  }

  updateNestedPreference<
    K extends keyof UserPreferences,
    NK extends keyof Required<UserPreferences>[K],
  >(key: K, nestedKey: NK, value: Required<UserPreferences>[K][NK]): void {
    this.prefsHandler.updateNestedPreference(key, nestedKey, value);
  }

  updateWorkingHours(type: 'start' | 'end', value: string): void {
    this.prefsHandler.updateWorkingHours(type, value);
  }

  savePreferences(): void {
    this.prefsHandler.savePreferences();
  }

  resetToDefaults(): void {
    this.prefsHandler.resetToDefaults();
  }
}
